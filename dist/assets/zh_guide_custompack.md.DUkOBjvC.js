import{_ as e,C as p,c as o,o as u,j as n,ag as i,a as l,G as t}from"./chunks/framework.Bw-5EFTY.js";const _=JSON.parse('{"title":"自定义打包","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/custompack.md","filePath":"zh/guide/custompack.md"}'),c={name:"zh/guide/custompack.md"},q={class:"info custom-block"};function d(r,s,P,k,g,h){const a=p("Badge");return u(),o("div",null,[s[1]||(s[1]=n("h1",{id:"自定义打包",tabindex:"-1"},[l("自定义打包 "),n("a",{class:"header-anchor",href:"#自定义打包","aria-label":'Permalink to "自定义打包"'},"​")],-1)),n("div",q,[s[0]||(s[0]=n("p",{class:"custom-block-title"},"自定义打包优点",-1)),t(a,{type:"tip",text:"不限制项目数量"}),t(a,{type:"tip",text:"不限制打包频率"}),t(a,{type:"tip",text:"不限制文件数量"}),t(a,{type:"tip",text:"文件大小放宽25M"}),t(a,{type:"tip",text:"更多自定义打包"})]),s[2]||(s[2]=i(`<p>如果你是程序员，你想调试你的前端项目，或者因为你的 dist 目录特别大文件特别多，但是 PakePlus 因为 github api 的原因限制了文件大小和数量，那么你可以使用高级玩法来实现同步你的 dist 目录到 github 仓库中，然后实现编译发布。</p><h2 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h2><p>1.先在 PakePlus 上创建一个项目，比如这个项目名称叫：deepseek</p><p>2.然后 clone 你的 PakePlus 仓库到本地 每个人在 PakePlus 填写验证 token 后，都会自动 fork PakePlus/PakePlus-Android/PakePlus-iOS 仓库到你的 github 账号下，你可以在你的 github 账号下找到你的 PakePlus 仓库，然后 clone 到本地。 注意：如果你想编译桌面端，你就 clone PakePlus，如果你想编译移动端，你就 clone PakePlus-Android/PakePlus-iOS。</p><p>3.使用 git 命令，拉取你仓库的所有分支，其中肯定有一个叫：deepseek 的分支 切到 deepseek 分支后，将你的 dist 文件夹内容复制到 src 目录下，然后提交到你的仓库中。 如果你同时想修改软件图标，你可以替换项目根目录的 app-icon.png 文件为你的图标文件，然后提交到你的仓库中。 注意: app-icon.png 文件必须是 png 格式并且名称必须是 app-icon.png，大小为 1024x1024 像素。 修改软件的名称等配置信息，可以在项目根目录的 scripts/ppconfig.json 里面修改。 桌面端修改 desktop 字段，安卓修改 android 字段，ios 修改 ios 字段。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;name&quot;: &quot;英文名称&quot;,</span></span>
<span class="line"><span>&quot;showName&quot;: &quot;显示名称&quot;,</span></span>
<span class="line"><span>&quot;version&quot;: &quot;版本号&quot;,</span></span>
<span class="line"><span>&quot;id&quot;: &quot;com.唯一id.app&quot;,</span></span>
<span class="line"><span>&quot;desc&quot;: &quot;项目描述&quot;,</span></span>
<span class="line"><span>&quot;webUrl&quot;: &quot;index.html&quot;,</span></span>
<span class="line"><span>&quot;iconPath&quot;: &quot;../app-icon.png&quot;,</span></span>
<span class="line"><span>&quot;inputPath&quot;: &quot;../app-icon.png&quot;,</span></span>
<span class="line"><span>&quot;tempPath&quot;: &quot;./processed-image.png&quot;,</span></span>
<span class="line"><span>&quot;icnsPath&quot;: &quot;../src-tauri/icons/icon.icns&quot;,</span></span>
<span class="line"><span>&quot;pubBody&quot;: &quot;发布内容描述&quot;,</span></span>
<span class="line"><span>&quot;isHtml&quot;: true,</span></span>
<span class="line"><span>&quot;single&quot;: 是否单例模式，true/false,</span></span>
<span class="line"><span>&quot;state&quot;: 状态保持，true/false,</span></span>
<span class="line"><span>&quot;injectJq&quot;: 是否注入 jQuery，true/false,</span></span>
<span class="line"><span>&quot;tauriApi&quot;: 是否注入 Tauri API，true/false,</span></span>
<span class="line"><span>&quot;debug&quot;: 是否开启调试模式，true/false,</span></span></code></pre></div><p>4.修改完之后，将这个分支推送到你的仓库中，然后到 github action 中触发编译 触发的时候，记得选择分支为 deepseek，然后点击运行工作流，等待编译完成即可。</p><p>5.发布完成后，到 PakePlus 的 release 页面，就可以下载你的软件了。</p>`,8))])}const b=e(c,[["render",d]]);export{_ as __pageData,b as default};
